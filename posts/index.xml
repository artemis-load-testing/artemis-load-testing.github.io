<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Artemis</title><link>https://artemis-load-testing.github.io/posts/</link><description>Recent content in Posts on Artemis</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Apr 2022 17:12:09 -0700</lastBuildDate><atom:link href="https://artemis-load-testing.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Artemis Case Study</title><link>https://artemis-load-testing.github.io/posts/case-study/</link><pubDate>Mon, 18 Apr 2022 17:12:09 -0700</pubDate><guid>https://artemis-load-testing.github.io/posts/case-study/</guid><description>Artemis Case Study 0. Introduction APIs are widely used and play an integral role in providing essential functionality to third-party applications. Given their vital nature, they should be tested continuously to ensure high availability. API load testing, or the process of simulating realistic traffic to an API to test its limits, can be performed using any number of available load testing tools in a local environment or in the cloud. Tests run locally often face a physical constraint, limiting the amount of load that can be generated.</description></item></channel></rss>